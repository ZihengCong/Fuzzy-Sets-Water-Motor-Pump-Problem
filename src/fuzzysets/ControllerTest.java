package fuzzysets;

/**
 *
 * @author Ziheng Cong
 * 
 * This class is for testing your controller using the inputs given by fuzzifying 
 * the inputs, firing the rules, and then defuzzifying the outcome. The firing of 
 * rules involves applying the min operator for implementing ‘and’. The intersection 
 * method in the FuzzyMember class can be used. The output generated by firing the 
 * rule gives the ‘y’ axis value. The defuzzification is required to convert that 
 * to the x-axis value which is the required output. Please refer to Figure 1 which 
 * shows the representation of F with a fuzzified out and actual output.
 * 
 */

public class ControllerTest {
    
    public static void main(String[] args) {
        double [] normalisedValues = new double[9];
        Controller controller = new Controller();
        FuzzyVariable frequencyChange = controller.getFrequencyChange();
               
        //Given inputs
        double[] pressure = {7, 14, 21, 11, 31, 45};
        double[] frequency = {2.3, 3.5, 4.4, 5.4, 5.7, 5.8};

        
        for (int i = 0; i < pressure.length; i++) {
            //Firing the rules
            FuzzyRule fuzzyRule = new FuzzyRule(pressure[i], frequency[i]);
            double Rule1Values[] = {fuzzyRule.getFuzzifiedPressureLow(),  fuzzyRule.getFuzzifiedFrequencyF1()}; 
            double Rule2Values[] = {fuzzyRule.getFuzzifiedPressureLow(),  fuzzyRule.getFuzzifiedFrequencyF2()};
            double Rule3Values[] = {fuzzyRule.getFuzzifiedPressureLow(),  fuzzyRule.getFuzzifiedFrequencyF3()};
            double Rule4Values[] = {fuzzyRule.getFuzzifiedPressureLow(),  fuzzyRule.getFuzzifiedFrequencyF4()};
            double Rule5Values[] = {fuzzyRule.getFuzzifiedPressureOptimum(),  fuzzyRule.getFuzzifiedFrequencyF2()};
            double Rule6Values[] = {fuzzyRule.getFuzzifiedPressureOptimum(),  fuzzyRule.getFuzzifiedFrequencyF3()};
            double Rule7Values[] = {fuzzyRule.getFuzzifiedPressureOptimum(),  fuzzyRule.getFuzzifiedFrequencyF4()};
            double Rule8Values[] = {fuzzyRule.getFuzzifiedPressureHigh(),  fuzzyRule.getFuzzifiedFrequencyF4()};
            double Rule9Values[] = {fuzzyRule.getFuzzifiedPressureVeryHigh(),  fuzzyRule.getFuzzifiedFrequencyF4()};
            
            //Store the minimum values by intersection
            FuzzyVariable frequencyTemp = controller.getFrequencyTemp();
            normalisedValues[0] = frequencyTemp.FuzzyInterSection(Rule1Values); 
            normalisedValues[1] = frequencyTemp.FuzzyInterSection(Rule2Values); 
            normalisedValues[2] = frequencyTemp.FuzzyInterSection(Rule3Values); 
            normalisedValues[3] = frequencyTemp.FuzzyInterSection(Rule4Values);
            normalisedValues[4] = frequencyTemp.FuzzyInterSection(Rule5Values);
            normalisedValues[5] = frequencyTemp.FuzzyInterSection(Rule6Values);
            normalisedValues[6] = frequencyTemp.FuzzyInterSection(Rule7Values);
            normalisedValues[7] = frequencyTemp.FuzzyInterSection(Rule8Values);
            normalisedValues[8] = frequencyTemp.FuzzyInterSection(Rule9Values);

            //Take the maximum of the flow changes
            double max = frequencyChange.FuzzyUnion(normalisedValues);
            fuzzyRule.setMax(max);
 
            //Get index of max in set normalisedValues for output purpose
            int indexOfMax = 0;
            for (int N = 0; N < normalisedValues.length; N++) {
                if (max == normalisedValues[N]) {
                    indexOfMax = N;
                    fuzzyRule.setIndexOfMax(indexOfMax);
                    fuzzyRule.setFrequencyIndex();
                    fuzzyRule.setPressureIndex();
                }
            }
            
            //Defuzzing the outcome
            String memberName ="";
            try {
                //Find the appropriate FuzzyMember to use fot defuzzification
                for (int m= 0; m <normalisedValues.length; m++){
                    if (normalisedValues[m] == max){
                        memberName =fuzzyRule.getRuleDetail()[m].split(", ")[3];
                        break;
                    }
                }
                //Defuzzification
                for (int j = 0; j < frequencyChange.getMembers().size(); j++){
                    if (memberName.equalsIgnoreCase(frequencyChange.getMembers().get(j).getName())){
                        double defuzzifiedOutcome = frequencyChange.getMembers().get(j).defuzzifyTriangle(max);
                        fuzzyRule.setDefuzzifiedOutcome(defuzzifiedOutcome);
                        fuzzyRule.setDeltaFName(frequencyChange.getMembers().get(j).getName());
                }
                }
            }catch(Exception e){
                   System.out.println(e.getMessage());
            }        
           
            System.out.printf("Fuzzy Rule\n");
            System.out.printf("Pressure(%.3f) = %s: %.3f \n", pressure[i], fuzzyRule.getRuleDetail()[indexOfMax].split(", ")[1], fuzzyRule.getFuzzifiedPressureList()[fuzzyRule.getIndexOfPressure()]);
            System.out.printf("Frequency(%.3f) = %s: %.3f \n", frequency[i], fuzzyRule.getRuleDetail()[indexOfMax].split(", ")[2], fuzzyRule.getFuzzifiedFrequencyList()[fuzzyRule.getIndexOfFrequency()]);
            System.out.printf("Fuzzified outcome: %.3f \n", max);
            System.out.printf("deltaF = %s, %.3f \n", fuzzyRule.getDeltaFName(), fuzzyRule.getDefuzzifiedOutcome());
            System.out.printf("\n");
        }
 
    }  
}
